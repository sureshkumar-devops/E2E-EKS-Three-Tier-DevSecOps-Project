pipeline {
    agent any
    triggers {
        pollSCM '* * * * *'
    }
    tools {
        jdk 'JAVA_HOME'
    }
    environment {
        scanner_home = tool 'sonarqube-scanner'
    }
    stages
    {
        stage('Clean Workspace')
        {
            steps {
                cleanWs()
            }
        }
        stage('Git Checkout')
        {
            steps {
                git branch: 'master',
                    url: 'https://github.com/sureshkumar-devops/E2E-EKS-Three-Tier-DevSecOps-Project.git'
            }
        }
        // Uncomment the following stages as needed
        // stage('OWASP Check') {
        //     steps {
        //         dir('app/frontend') {
        //             dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'DPCHECK_HOME'
        //             dependencyCheckPublisher pattern: '**/frontend-report.xml'
        //         }
        //     }
        // }
        // stage('SonarQube Analysis') {
        //     steps {
        //         dir('app/frontend') {
        //             withSonarQubeEnv('sonarqube-server') {
        //                 sh ''' $scanner_home/bin/sonar-scanner \
        //                     -Dsonar.ProjectName=frontend \
        //                     -Dsonar.ProjectKey=frontend '''
        //             }
        //         }
        //     }
        // }
        // stage('QualityGates') {
        //     steps {
        //         dir('app/frontend') {
        //             script {
        //                 timeout(time: 1, unit: 'MINUTES') {
        //                     waitForQualityGate abortPipeline: false
        //                 }
        //             }
        //         }
        //     }
        // }
        // stage('Trivy FS SCAN') 
        // {
        //     steps {
        //         dir('app/frontend') {

        stage('Build Docker Image ')
        {
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-credentials', toolName: 'DOCKER_HOME')
                    {
                      sh 'docker build -t frontend-image:${BUILD_NUMBER} -f docker/dockerfiles/frontend/Dockerfile .'
                    }
                }
            }
        }
        stage('Push & Tag Docker Image') 
        {
            steps {
                sh 'docker tag frontend-image:${BUILD_NUMBER} lehardocker/frontend-image:${BUILD_NUMBER}'
                sh 'docker push lehardocker/frontend-image:${BUILD_NUMBER}'
            }
        }
        stage('Trivy Image SCAN') 
        {
            steps 
            {
              sh 'trivy image lehardocker/frontend-image:${BUILD_NUMBER} > trivyimage-${BUILD_NUMBER}.txt'
            }
        }
        stage('GitHub Login')
        {
          steps
          {
            git credentialsId: 'GitHub',url: 'https://github.com/sureshkumar-devops/E2E-EKS-Three-Tier-DevSecOps-Project.git'
          }
        }
        stage('Update Deployment File') 
        {
            environment 
            {
                GIT_REPO_NAME = 'E2E-EKS-Three-Tier-DevSecOps-Project'
                GIT_USER_NAME = 'sureshkumar-devops'
            }
            steps 
            {
                dir('k8s/manifests/frontend/') 
                {
                    withCredentials([string(credentialsId: 'githubtoken', variable: 'GH_TOKEN')]) 
                    {
                        echo 'Updating Deployment File'
                         sh '''
                            git config --global user.name 'sureshkumar-devops'
                            git config --global user.email 'suresh.ak47@gmail.com'
                            echo "Build Number: ${BUILD_NUMBER}"

                            # Extract the current image tag from the deployment file
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo "Current Image Tag: $imageTag"
                            
                            echo "############## Deploying new version of 3-tier app ##############"
                            # Replace the old image tag with the new build number
                            sed -i "s/${imageTag}/${BUILD_NUMBER}/g" deployment.yaml

                            # Commit and push the updated deployment file
                            git add deployment.yaml
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                            git push https://${GH_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                    }    '''
                    }   
                }
            }
        }
  }}
}
